name: 'Lambda Deploy Dev'

on:
  push:
    branches: [ dev ]
    paths:
        - 'lambda/**'
        - 'dynamodb/**'
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_API_TOKEN: ${{secrets.TF_API_TOKEN}}
  ROOT_PATH: '${{ github.workspace }}'

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.ROOT_PATH }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ${{ env.ROOT_PATH }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -out=lambda.tfplan
      working-directory: ${{ env.ROOT_PATH }}
      env:
        TF_VAR_graphql_api: ${{ secrets.DEV_GRAPHQL_API }}

      # On push to "dev", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false "lambda.tfplan"
      working-directory: ${{ env.ROOT_PATH }}
      env:
        TF_VAR_graphql_api: ${{ secrets.DEV_GRAPHQL_API }}
